/** selectionUTest.cxxtest ---
 *
 * Copyright (C) 2011 OpenCog Foundation
 * Copyright (C) 2014 Aidyia Limited
 *
 * Author: Linas Vepstas <linasvepstas@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>
#include <opencog/util/Logger.h>
#include <moses/moses/main/moses_exec.h>
#include <moses/comboreduct/table/table.h>
#include <moses/comboreduct/table/table_io.h>
#include "moses-framework.h"

using namespace opencog::moses;

const string test_dir = string(PROJECT_SOURCE_DIR) + "/tests/moses/";

/**
 * Test of the selection scorer
 */
class selectionUTest : public CxxTest::TestSuite
{
public:
    selectionUTest() {
        // opencog::logger().setPrintToStdoutFlag(true);
    }

    void frame(string filename, string meval, bool boosting,
               string expstr, int hamm)
    {
        string data_file_path(test_dir + filename);

        // Create temp output file
        vector<string> args = {"-i" + data_file_path, "-Hselect", meval,
                               // "-lDEBUG",
                               "-q0.8", "-w0.9"};

        if (boosting) args.push_back("--boost=1");

        auto cmd_tempfile = build_cmd(args);
        moses_exec(cmd_tempfile.first);

        // get the combo tree
        combo_tree comtr = parse_result(cmd_tempfile.second).second;
        unlink(cmd_tempfile.second.c_str());

        std::cout << "Learned tree " << comtr << endl;

        // Re-read the data file
        Table datatable;
        datatable = loadTable(data_file_path, "output", "",
                              std::vector<std::string>());

        OTable predicted(comtr, datatable.itable);

        // The expected output is this:
        combo_tree exptr;
        std::stringstream(expstr) >> exptr;

        // Copy the output column into an 'input table'.
        ITable ocoli(datatable.otable);
        OTable expected(exptr, ocoli);

        // Place all the columns in one spot, for easier debugging.
        ITable dbg;
        dbg.insert_col("predicted", predicted);
        dbg.insert_col("expected", expected);
        dbg.insert_col("raw", datatable.otable);
        // std::cout << "Debug table:\n" << dbg << std::endl;

        double diff = expected.abs_distance(predicted);
        std::cout << "Hamming distance=" << diff << " expected "<< hamm << endl;

        TS_ASSERT(hamm == diff);
    }

    // -----------------------------------------------------------
    // The next three test boosted versions of the selection scorer.
    void test_selection()
    {
        // The expected output is this:
        string expstr = "and( 0<( +($1 -1329.385)) not(0<( +($1 -1650.225))))";
        // Maximum reachable score is 28, and should be reachable in
        // about 7K evaluations.
        frame("select.csv", "-m15000", true, expstr, 28);
    }

    void test_selection_de()
    {
        // The expected output is this:
        string expstr = "and( 0<( +($1 -1329.385)) not(0<( +($1 -1663.795))))";
        // Maximum reachable score is 12, and should be reachable in 
        // about 32K evaluations.
        frame("select-less-dupe.csv", "-m50000", true, expstr, 12);
    }

    void test_selection_no()
    {
        // The expected output is this:
        string expstr = "and( 0<( +($1 -1329.385)) not(0<( +($1 -1663.795))))";
        // Maximum reachable score is 0, and should be reachable in
        // about 42K evaluations.
        frame("select-no-dupe.csv", "-m80000", true, expstr, 0);
    }

    // -----------------------------------------------------------
    // The next three test NON-boosted versions of the selection scorer.
    void test_selection_noboo()
    {
        // The expected output is this:
        string expstr = "and( 0<( +($1 -1329.385)) not(0<( +($1 -1650.225))))";
        // Maximum reachable score is 28.  Without boosting, as
        // compared to above, the solution is not as good: the ones
        // that are typically found have a score of -4, so 28+4 = 32
        frame("select.csv", "-m10000", false, expstr, 32);
    }

    void test_selection_de_noboo()
    {
        // The expected output is this:
        string expstr = "and( 0<( +($1 -1329.385)) not(0<( +($1 -1663.795))))";
        // Maximum reachable score is 12, but, without boosting, as
        // compared to above, the solution is not as good: the ones
        // that are typically found have a score of -21, so 12+21 = 33
        frame("select-less-dupe.csv", "-m20000", false, expstr, 33);
    }

    void test_selection_no_noboo()
    {
        // The expected output is this:
        string expstr = "and( 0<( +($1 -1329.385)) not(0<( +($1 -1663.795))))";
        // Maximum reachable score is 0, but, without boosting, as
        // compared to above, the solution is not as good: the ones
        // that are typically found have a score of -21, so 0+21 = 21
        frame("select-no-dupe.csv", "-m40000", false, expstr, 21);
    }
};
