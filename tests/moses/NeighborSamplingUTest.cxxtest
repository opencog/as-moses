#include <ctime>
#include <cxxtest/TestSuite.h>

#include <opencog/util/mt19937ar.h>
#include <opencog/util/dorepeat.h>
#include <moses/moses/representation/field_set.h>
#include <moses/moses/representation/instance_set.h>
#include <moses/moses/moses/types.h>
#include <moses/moses/moses/neighborhood_sampling.h>


using namespace opencog;
using namespace moses;
using namespace std;

class NeighborSamplingUTest : public CxxTest::TestSuite {
    opencog::RandGen& rng;
public:
    NeighborSamplingUTest() : rng(randGen()) {
        logger().set_print_to_stdout_flag(true);
        logger().set_level(Logger::DEBUG);

        int rand_seed = clock();
        rng.seed(rand_seed);
    }

private:
    /**
     * Sample 'sample_size' instances from the neighborhood of the zero
     * instance, at a distance 'dist' from zero.  That is, sample
     * 'sample_size' instances which have 'dist' different knobs set to
     * non-zero values.
     *
     * @param fs            deme
     * @param dist          distance
     * @param sample_size   number of instances to be generated
     * @param out           deme iterator (where to store the instances)
     * @param end           deme iterator, containing the end iterator,
     *                      necessary to check that 'out' does not go out
     *                      of the deme if it does so then an assert is raised
     */
    template<typename Out>
    void z_sample_from_neighborhood(const field_set& fs, unsigned dist,
                                  unsigned sample_size, Out out, Out end)
    {
        instance inst(fs.packed_width());
    
        // Reset all fields (zero them out).
        // contin and term algebra fields are ignored... because
        // the contin part of the tests don't call this. XXX Caution.
        for (field_set::bit_iterator it = fs.begin_bit(inst);
                it != fs.end_bit(inst); ++it)
            *it = false;
    
        for (field_set::disc_iterator it = fs.begin_disc(inst);
                it != fs.end_disc(inst); ++it)
            *it = 0;
    
        sample_from_neighborhood(fs, dist, sample_size, out, end, inst);
    }

    /**
     * measure the hamming distance of any instance of the deme to
     * center_inst, except center_inst of course. And count the number
     * of instances that are at distance > 0 from center_inst.
     * 
     * @param sample_size return the number of neighbors at 
     *                    distance > 0 from center_inst
     * @param max_distance return the maximum distance of a neighbor
     *                     from center_inst
     * @param min_distance return the minimum distance of a neighbor
     *                     from center_inst
     */
    template<typename ScoreT>
    void get_sample_size_and_distance(const instance_set<ScoreT>& deme, 
                                      size_t& sample_size, 
                                      unsigned int& max_distance,
                                      unsigned int& min_distance,
                                      const instance& center_inst) 
    {
        const field_set& fs = deme.fields();
        OC_ASSERT(center_inst.size() == fs.packed_width(),
                  "Please make sure the given center_inst have the "
                  "same size with field_set's width");

        sample_size = 0;
        max_distance = 0;
        min_distance = fs.packed_width() * bits_per_packed_t;

        std::cout << "fs.pack_width = " << fs.packed_width()
                  << " bpp = " << bits_per_packed_t << std::endl;

        for (const instance& inst : deme) {
            unsigned int distance = fs.hamming_distance(center_inst, inst);
            if (distance > 0) {
                if (distance > max_distance)
                    max_distance = distance;
                if (distance < min_distance)
                    min_distance = distance;
                sample_size++;
            }
        }
    }

    template<typename ScoreT>
    void get_sample_size_and_distance(const instance_set<ScoreT> & deme,
                                      size_t& sample_size, 
                                      unsigned int& max_distance,
                                      unsigned int& min_distance)
    {
        const field_set& fs = deme.fields();
        // the default center instance as exemplar is set to 0
        instance center_inst(fs.packed_width()); 
        
        get_sample_size_and_distance(deme, sample_size,
                                     max_distance, min_distance, center_inst);
       
    }

    void test_generate_contin_neighbor(unsigned distance,
                                       unsigned depth,
                                       unsigned num_fields)
    {
        field_set fs(field_set::contin_spec(0.0, 0.5, 0.5, depth),
                     num_fields);
        instance inst(fs.packed_width());
        randomize(fs, inst, rng);

        instance new_inst(inst);

        // choose randomly a contin among the num_fields ones
        int rnd_idx = rng.randint(num_fields);
        cout << "rnd_idx = " << rnd_idx << endl;
        field_set::contin_iterator it = fs.begin_contin(inst) + rnd_idx;
        contin_t old_c = fs.get_contin(inst, rnd_idx);
        cout << "before generate: " << fs.to_string_raw(inst)
             << ", contin = " << old_c << endl;
        generate_contin_neighbor(fs, new_inst, it, distance);
        contin_t new_c = fs.get_contin(new_inst, rnd_idx);
        cout << "after  generate: " << fs.to_string_raw(new_inst)
             << ", contin = " << new_c << endl;
        
        int new_dist = fs.hamming_distance(inst, new_inst);
        cout << "new distance: " << new_dist << endl;

        // The new contin may differ from the old one by hamming
        // distance of 1.
        TS_ASSERT_EQUALS(new_dist, distance);

        // The new contin must be different than the old
        TS_ASSERT_DIFFERS(new_c, old_c);
    }

public:
    void test_generate_small_contin_neighbor()
    {
        dorepeat(1000)
            test_generate_contin_neighbor(1, 2, 2);
    }

    void test_generate_large_contin_neighbor()
    {
        dorepeat(1000)
            test_generate_contin_neighbor(3, 8, 4);
    }

    void test_sample_from_neighborhood() 
    {    
        int rand_seed = clock();
        unsigned int distance;
        size_t sample_size, num_fields;
        field_set::width_t width ;
        size_t sampled_size;
        unsigned int sampled_max_distance;
        unsigned int sampled_min_distance;        
        randGen().seed(rand_seed);

        // 1. test, the exemplar is initialized to 0
        {
            distance  = 2;
            sample_size = 10;
            num_fields = 20;
            width = 5;
            field_set fs(field_set::disc_spec(width), num_fields);
            instance_set<composite_score>  deme(100, fs);

            z_sample_from_neighborhood(deme.fields(),
                                     distance,
                                     sample_size,
                                     deme.begin(), deme.end());
            get_sample_size_and_distance(deme,
                                         sampled_size,
                                         sampled_max_distance,
                                         sampled_min_distance);
            cout << endl;
            cout << "test 1 -- sample_size: " << sample_size
                 << " sampled_size: " << sampled_size
                 << " max_distance: " << sampled_max_distance
                 << " min_distance:" << sampled_min_distance
                 << endl;
            TS_ASSERT_EQUALS(sample_size, sampled_size);
            TS_ASSERT_EQUALS(distance, sampled_max_distance);
            TS_ASSERT_EQUALS(distance, sampled_min_distance);
        }
        
        // 2. test, the exemplar is given randomizely
        {
            distance  = 1;
            sample_size = 8;
            num_fields = 15;
            width = 4;
            field_set fs(field_set::disc_spec(width), num_fields);
            instance center_inst(fs.packed_width());
            randomize(fs, center_inst);
            instance_set<composite_score> 
                deme(100, center_inst, fs);
          
            // cout<<fs.to_string(center_inst)<<endl;

            sample_from_neighborhood(deme.fields(),
                                     distance,
                                     sample_size,
                                     deme.begin(), deme.end(),
                                     center_inst);

            get_sample_size_and_distance(deme,sampled_size,
                                         sampled_max_distance,
                                         sampled_min_distance,
                                         center_inst);

            //  cout << endl << "sample_size:" << sampled_size << "  max_distance:" << 
            //   sampled_max_distance <<" min_distance :"<< sampled_min_distance <<endl;

            TS_ASSERT_EQUALS(sample_size, sampled_size);
            TS_ASSERT_EQUALS(distance, sampled_max_distance);
            TS_ASSERT_EQUALS(distance, sampled_min_distance);
        }
               
        // 3. test the contin_spec
        {
            distance = 2;
            sample_size = 10;
            num_fields = 2;
            
            field_set fs(field_set::contin_spec(0.0, 0.5, 0.5, 2), num_fields);
            instance center_inst(fs.packed_width());
            randomize(fs, center_inst);
            instance_set<composite_score> deme(100, center_inst, fs);
            
            cout << "the initial randomized contin_spec instance: "
                 << fs.to_string_raw(center_inst) << endl;
            
            sample_from_neighborhood(deme.fields(),
                                     distance,
                                     sample_size,
                                     deme.begin(), deme.end(),
                                     center_inst);

            get_sample_size_and_distance(deme, sampled_size,
                                         sampled_max_distance,
                                         sampled_min_distance,
                                         center_inst);
            
            cout << endl << "test 3 -- sample_size:" << sample_size
                 << " sampled_size:" << sampled_size
                 << " max_distance:" << sampled_max_distance
                 << " min_distance:"<< sampled_min_distance <<endl;
            
            // With only five contin fields to mess with, there is a
            // small but finite chance that the contin sampling routine
            // will pick a field, change it, then pick the same field,
            // and put it back: viz. no change at all, aka a zero-distance
            // change.  So tolerate this possibility ...
            //
            TS_ASSERT_EQUALS(sample_size, sampled_size);
            TS_ASSERT(sampled_min_distance <= sampled_max_distance);
            TS_ASSERT((1 <= sampled_min_distance) &&
                      (sampled_min_distance <= distance));
            TS_ASSERT((1 <= sampled_max_distance) &&
                      (sampled_max_distance <= distance));
        }
     }

private:
    void test_generate_all_in_neighborhood(field_set& fs,
                                           unsigned int distance,
                                           unsigned int deme_size,
                                           instance& inst) {
        instance_set<composite_score> deme(deme_size, inst, fs);
        generate_all_in_neighborhood(deme.fields(), distance,
                                     deme.begin(), deme.end(), inst);
        size_t generated_size;
        unsigned int generated_max_distance, generated_min_distance;        
        get_sample_size_and_distance(deme, generated_size, 
                                     generated_max_distance,
                                     generated_min_distance,
                                     inst);
        // cout << generated_size << " " << generated_max_distance
        //  << " " << generated_min_distance <<endl;

        size_t total_size = count_neighborhood_size(fs, inst, distance);
        cout << "total_size :" << total_size <<endl;
        cout << "generated_size :" << generated_size <<endl;

        // The new contin sampling routine has a non-zero chance
        // of returning zero-distance variants.  But this is no
        // worse than returning duplicates...
        // TS_ASSERT_EQUALS(generated_size, total_size);
        TS_ASSERT(total_size*3 <= 4*generated_size);
        TS_ASSERT_EQUALS(generated_max_distance, distance);
        TS_ASSERT_EQUALS(generated_min_distance, distance);
    }
                                           
public:
    void test_generate_all_in_neighborhood1() 
    {
        // test all neighbors of a null instance, fields are 5
        // discs of width 8
        unsigned int distance = 2;
        field_set::width_t width = 8;
        size_t size = 5;
        field_set fs(field_set::disc_spec(width), size);
        instance inst(fs.packed_width());
        test_generate_all_in_neighborhood(fs, distance, 100000, inst);
    }

    void test_generate_all_in_neighborhood2() 
    { 
        // test all neighbors of a random center instance, fields
        // are 5 discs of width 3            
        unsigned int distance = 2;
        field_set::width_t width = 3;
        size_t size = 5;
        field_set fs(field_set::disc_spec(width), size);
        instance center_inst(fs.packed_width());
        int rand_seed = clock();
        randGen().seed(rand_seed);
        randomize(fs, center_inst); 
        test_generate_all_in_neighborhood(fs, distance, 100, center_inst);
    }

    void test_generate_all_in_neighborhood3() 
    { 
        // test all neighbors of a null center instance.
        // There are 2 contin fields of depth 4            
        unsigned int distance = 2;
        size_t depth = 4;
        size_t num_fields = 2;
        field_set fs(field_set::contin_spec(0.0,0.5,0.5,depth), num_fields);
        instance center_inst(fs.packed_width());
        int rand_seed = clock();
        randGen().seed(rand_seed);
        randomize(fs, center_inst); 
        test_generate_all_in_neighborhood(fs, distance, 100, center_inst);
    }

    void test_generate_all_in_neighborhood4() 
    { 
        // test all neighbors of a null center instance, fields are 40 bits
        unsigned int distance = 1;
        field_set::width_t width = 2;
        size_t b_size = 40;
        field_set fs(field_set::disc_spec(width), b_size);
        instance inst(fs.packed_width());
        std::cout << "bits : " << fs.to_string(inst) << std::endl;
        test_generate_all_in_neighborhood(fs, distance, 100, inst);
    }

    void test_vary_n_knobs() 
    { 
        // test n_modif neighbors of a null center instance, fields are 40 bits
        unsigned int distance = 1;
        field_set::width_t width = 2;
        unsigned int n_modif = 1; // number of bits to modify 
        size_t b_size = 40;
        field_set fs(field_set::disc_spec(width), b_size);
        instance inst(fs.packed_width());
        std::cout << "bits : " << fs.to_string(inst) << std::endl;
        instance_set<composite_score> deme(n_modif, fs);
        vary_n_knobs(fs, inst, distance, b_size-n_modif, deme.begin(), deme.end());

        size_t generated_size;
        unsigned int generated_max_distance, generated_min_distance;        
        get_sample_size_and_distance(deme, generated_size, 
                                     generated_max_distance,
                                     generated_min_distance);
        // cout << generated_size << " " << generated_max_distance
        //  << " " << generated_min_distance <<endl;

        TS_ASSERT_EQUALS(generated_size, n_modif);
        TS_ASSERT_EQUALS(generated_max_distance, distance);
        TS_ASSERT_EQUALS(generated_min_distance, distance);
    }

};
