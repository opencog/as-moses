#
# Tests are listed and run in more-or-less dependency order:
# Later tests assume earlier tests pass.
#
ADD_SUBDIRECTORY (scoring)

ADD_CXXTEST(iostream_scored_combo_treeUTest)
TARGET_LINK_LIBRARIES(iostream_scored_combo_treeUTest
	moses
	ascomboreduct
	${COGUTIL_LIBRARY}
)

ADD_CXXTEST(KnobTurningUTest)
TARGET_LINK_LIBRARIES(KnobTurningUTest
	moses
	ascomboreduct
	${COGUTIL_LIBRARY}
)

# requires boost::math; don't build if not found.
IF(Boost_MATH_C99_FOUND)
	ADD_CXXTEST(NeighborSamplingUTest)
	TARGET_LINK_LIBRARIES(NeighborSamplingUTest
		moses
		ascomboreduct
		${COGUTIL_LIBRARY}
	)
ENDIF(Boost_MATH_C99_FOUND)


ADD_CXXTEST(FieldSetUTest)
TARGET_LINK_LIBRARIES(FieldSetUTest
	moses
	ascomboreduct
	${COGUTIL_LIBRARY}
)

ADD_CXXTEST(representationUTest)
TARGET_LINK_LIBRARIES(representationUTest
	moses
	ascomboreduct
	${COGUTIL_LIBRARY}
)

ADD_CXXTEST(scoringUTest)
TARGET_LINK_LIBRARIES(scoringUTest
	moses
	ascomboreduct
	${COGUTIL_LIBRARY}
)

ADD_CXXTEST(metapopulationUTest)
TARGET_LINK_LIBRARIES(metapopulationUTest
	moses
	ascomboreduct
	${COGUTIL_LIBRARY}
)

ADD_CXXTEST(optimizationUTest)
TARGET_LINK_LIBRARIES(optimizationUTest
	moses
	ascomboreduct
	${COGUTIL_LIBRARY}
)

ADD_CXXTEST(MOSESUTest)
TARGET_LINK_LIBRARIES(MOSESUTest
	asmoses_exec
	moses
	ascomboreduct
	${COGUTIL_LIBRARY}
)

ADD_CXXTEST(weightedUTest)
TARGET_LINK_LIBRARIES(weightedUTest
	asmoses_exec
	moses
	ascomboreduct
	${COGUTIL_LIBRARY}
)

ADD_CXXTEST(mixedUTest)
TARGET_LINK_LIBRARIES(mixedUTest
	asmoses_exec
	moses
	ascomboreduct
	${COGUTIL_LIBRARY}
)

ADD_CXXTEST(irisUTest)
TARGET_LINK_LIBRARIES(irisUTest
	asmoses_exec
	moses
	ascomboreduct
	${COGUTIL_LIBRARY}
)

ADD_CXXTEST(selectionUTest)
TARGET_LINK_LIBRARIES(selectionUTest
	asmoses_exec
	moses
	ascomboreduct
	${COGUTIL_LIBRARY}
)

ADD_CXXTEST(dynFeatSelUTest)
TARGET_LINK_LIBRARIES(dynFeatSelUTest
	asmoses_exec
	moses
	ascomboreduct
	${COGUTIL_LIBRARY}
)

ADD_CXXTEST(AntUTest)
TARGET_LINK_LIBRARIES(AntUTest
	ant_scoring
	asmoses_exec
	moses
	ascomboreduct
	${COGUTIL_LIBRARY}
)
