/** contin_bscore_UTest.cxxtest ---
 *
 * Copyright (C) 2018 OpenCog Foundation
 *
 * Authors: Kasim Ebrahim <se.kasim.ebrahim@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include <cxxtest/TestSuite.h>
#include <opencog/moses/scoring/bscores.h>
#include <opencog/atoms/base/Link.h>
#include <opencog/data/table/table.h>
#include <opencog/data/table/table_io.h>

#include "opencog/utils/value_key.h"
#include "opencog/moses/main/populate_atomspace.h"

using namespace opencog;
using namespace combo;
using namespace moses;
using namespace std;

#define GET_CONTIN [](const vertex &ver){ return get_contin(ver); }

const string utest_dir=string(PROJECT_SOURCE_DIR) + "/tests/moses/scoring/";
const string target_feature="out";

class contin_bscoreUTest : public CxxTest::TestSuite
{
public:
	void test_contin_bscore(void)
	{
		Table table = loadTable(utest_dir + "contin_data.csv", target_feature);
		contin_bscore c_bscore(table);

		Handle f1 = createNode(SCHEMA_NODE, "f1");
		Handle f2 = createNode(SCHEMA_NODE, "f2");
		populate_frm_table(table, f1,f2);

		HandleSeq handleSeq = {f1, f2};
		Handle program = createLink(handleSeq, PLUS_LINK);

		behavioral_score bs = c_bscore(program);
		behavioral_score expected_bs = {0, 0, -1};

		TS_ASSERT_EQUALS(bs, expected_bs);
	}
};
