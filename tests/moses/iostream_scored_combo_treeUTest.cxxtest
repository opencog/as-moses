/*
 * tests/moses/iostream_bscored_combo_treeUTest.cxxtest
 *
 * Copyright (C) 2012 OpenCog Foundation
 * All Rights Reserved
 *
 * Written by Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>
#include <sstream>
#include <string>

#include <moses/moses/moses/types.h>

using namespace opencog;
using namespace moses;

class iostream_scored_combo_treeUTest : public CxxTest::TestSuite
{
public:
    void test_iostream_scored_combo_tree() {
        std::string tr_str = "and($1 $2 or($3 $4))";
        combo::combo_tree tr;
        std::stringstream(tr_str) >> tr;
        score_t sc = 0.5;
        complexity_t cpx = tree_complexity(tr);
        score_t cpx_penalty = 0.1;
        score_t diversity_penalty = 0.2;
        behavioral_score bs = {0.25, 0, 0.25};

        // build the scored_combo_tree
        composite_score cs(sc, cpx, cpx_penalty, diversity_penalty);
        scored_combo_tree bct(tr, demeID_t(1,2,3), cs, bs);

        // build expected string
        std::stringstream oss;
        oss << bct;
        std::cout << "original tree = " << oss.str() << std::endl;

        // check that it is the same object parse by istream_scored_combo_tree
        scored_combo_tree parsed_bct = string_to_scored_combo_tree(oss.str());

        std::cout << "parsed tree = " << parsed_bct << std::endl;
        // check the combo trees
        TS_ASSERT_EQUALS(bct.get_tree(), parsed_bct.get_tree());
        // check the composite scores
        TS_ASSERT_EQUALS(bct.get_composite_score(), parsed_bct.get_composite_score());
        // check the demeID
        TS_ASSERT_EQUALS(bct.get_demeID(), parsed_bct.get_demeID());
        // check the behavioral score
        TS_ASSERT_EQUALS(bct.get_bscore(), parsed_bct.get_bscore());        
    }
};
