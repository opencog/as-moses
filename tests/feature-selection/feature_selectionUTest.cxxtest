/** feature_selectionUTest.cxxtest ---
 *
 * Copyright (C) 2010 OpenCog Foundation
 *
 * Author: Nil Geisweiller <nilg@nilg-desktop>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <unistd.h>

#include <cxxtest/TestSuite.h>

#include <opencog/util/oc_omp.h>
#include <moses/comboreduct/table/table.h>
#include <moses/comboreduct/table/table_io.h>

#include <moses/feature-selection/algo/incremental.h>
#include <moses/feature-selection/main/feature-selection.h>
#include <moses/moses/optimization/optimization.h>  // for opencog::hc

#define FEATURE_SELECTION_TEST_DIR PROJECT_SOURCE_DIR"/tests/feature-selection/"

using namespace opencog;
using namespace combo;
using namespace std;
using boost::counting_iterator;

class feature_selectionUTest : public CxxTest::TestSuite
{
    Table big_table, small_table, small_table_swap_f2_f3,
        timestamp_table, sparse_table;
    string big_table_path, small_table_path, small_table_swap_f2_f3_path,
        timestamp_table_path, sparse_table_path;

public:
    typedef MutualInformation<set<arity_t>> FeatureScorer;

    feature_selectionUTest()
        : big_table_path(FEATURE_SELECTION_TEST_DIR"big-dataset.csv"),
          small_table_path(FEATURE_SELECTION_TEST_DIR"small-dataset.csv"),
          small_table_swap_f2_f3_path(FEATURE_SELECTION_TEST_DIR"small-dataset_swap_f2_f3.csv"),
          timestamp_table_path(FEATURE_SELECTION_TEST_DIR"timestamp-dataset.csv"),
          sparse_table_path(FEATURE_SELECTION_TEST_DIR"contin-sparse.data")
    {
        logger().set_print_to_stdout_flag(true);
        logger().set_level(Logger::FINE);

        // Load big table
        big_table = loadTable(big_table_path);

        // Load small table
        small_table = loadTable(small_table_path);

        // Load small table with f2 and f3 swapped
        small_table_swap_f2_f3 = loadTable(small_table_swap_f2_f3_path);

        // Load sparse contin table, ignoring the date and swoosh
        // features, cause loadTable does support timestamp features
        // for sparse table yet, and feature-selection is not yet able
        // to interpret the swoosh feature.
        vector<string> ignore_features = {"date", "swoosh"};
        sparse_table = loadTable(sparse_table_path, string(), string(),
                                 ignore_features);

        // load ignore_enfore_target table
        string timestamp_feature = "timestamp";
        string target_feature = "target";
        timestamp_table = loadTable(timestamp_table_path,
                                    target_feature, timestamp_feature);
    }

    void test_incremental_selection_j1() {
        test_incremental_selection(1);
    }
    void test_incremental_selection_j4() {
        test_incremental_selection(4);
    }
    void test_redundant_features_small_table_j1() {
        test_redundant_features_small_table(1);
    }
    void test_redundant_features_small_table_swap_f2_f3_j1() {
        test_redundant_features_small_table_swap_f2_f3(1);
    }
    void test_redundant_features_big_table_j1() {
        test_redundant_features_big_table(1);
    }
    void test_redundant_features_big_table_j4() {
        test_redundant_features_big_table(4);
    }

    void test_moses_based_feature_selection_j1() {
        test_moses_based_feature_selection(1);
    }

    void test_timestamp_feature_selection() {
        // set feature selection parameters
        feature_selection_parameters fsp;
        fsp.algorithm = "inc";
        fsp.scorer = mi;
        fsp.input_file = timestamp_table_path;
        fsp.target_size = 1;
        fsp.jobs = 1;
        setting_omp(fsp.jobs);
        fsp.inc_target_size_epsilon = 1e-10;
        fsp.inc_interaction_terms = 1;

        ostreamTable(std::cout << "timestamp target table = ", timestamp_table);

        // run and test feature selection
        test_feature_selection(timestamp_table, fsp, "timestamp,f2,target");
    }

    void test_smd_with_init_feature1() {
        // set feature selection parameters
        feature_selection_parameters fsp;
        fsp.algorithm = "smd";
        fsp.scorer = mi;
        fsp.input_file = small_table_path;
        fsp.initial_features = {"f1"};
        fsp.force_features_str = {"f1"};
        fsp.target_size = 2;
        fsp.smd_top_size = 1;
        fsp.jobs = 1;
        setting_omp(fsp.jobs);

        // run and test feature selection
        test_feature_selection(small_table, fsp, "target,f1,f2");
    }

    void test_smd_with_init_feature2() {
        // set feature selection parameters
        feature_selection_parameters fsp;
        fsp.algorithm = "smd";
        fsp.scorer = mi;
        fsp.input_file = small_table_path;
        fsp.initial_features = {"f2"};
        fsp.force_features_str = {"f2"};
        fsp.target_size = 2;
        fsp.smd_top_size = 1;
        fsp.jobs = 1;
        setting_omp(fsp.jobs);

        // run and test feature selection
        test_feature_selection(small_table, fsp, "target,f1,f2");
    }

    void test_simple_sparse_contin()
    {
        // set feature selection parameters
        feature_selection_parameters fsp;
        fsp.algorithm = "simple";
        fsp.input_file = sparse_table_path;
        // Ask for 9 because features 10 through 61 have identical scores
        // and will thus show up randomly, and thus this test will fail
        // (unless we ask for 61 of them... which we do, below)
        fsp.target_size = 9;
        fsp.inc_red_intensity = -1.0;
        fsp.jobs = 1;
        setting_omp(fsp.jobs);

        // run and test feature selection
        test_feature_selection(sparse_table, fsp,
            "change_percent,BECAUSE,BETWEEN,FEB,IN_PERSONBYRULE,NUMBER23,PERCENT,QUARTER,WERE,WHICH");
    }

    // Same as above, but ask for more features.
    void test_simple_sparse_contin_more()
    {
        // set feature selection parameters
        feature_selection_parameters fsp;
        fsp.algorithm = "simple";
        fsp.input_file = sparse_table_path;
        // Features 10 through 61 have identical scores and will show
        // up randomly, unless we ask for all of them.
        fsp.target_size = 61;
        fsp.inc_red_intensity = -1.0;
        fsp.jobs = 1;
        setting_omp(fsp.jobs);

        // run and test feature selection
        test_feature_selection(sparse_table, fsp,
            "change_percent,ADDS,AG,ANALYST,ANGELES,ARMOR,BECAUSE,BEFORE,BETWEEN,CLIENTS,COMPUTER,DIFFERENT,EIGHT,ERN,FEB,FIRM,FIVE,GOV,GOVERNMENT,INCLUDED,INCLUDING,IN_LOCATION,IN_PERSONBYRULE,JOINT,KNOWN,LESS,LOS,MAJOR,MARTIN,MICHAEL,MODEL,MONTHS,NATIONAL,NOV,NUMBER15402473,NUMBER23,NUMBER35,NUMBER4055922,NUMBER654,ORLAND,OUTLAYS,PARAGRAPH,PERCENT,PLANES,PRICE,PROGRAMS,QUARTER,RAY,REPORTERS,SECURITY,SHARES,STARTED,SUCH,SUSANNA,THROUGH,TOGETHER,TOLD,VERY,WAYS,WERE,WHICH,WORTH");
    }

    void test_random_selection()
    {
        // set feature selection parameters
        feature_selection_parameters fsp;
        fsp.algorithm = "random";
        fsp.input_file = sparse_table_path;
        // Ask for 20
        fsp.target_size = 20;
        fsp.jobs = 1;
        setting_omp(fsp.jobs);

        // run and test feature selection
        test_random_feature_selection(sparse_table, fsp, fsp.target_size);
    }

    void test_random_selection_with_timestamp()
    {
        // set feature selection parameters
        feature_selection_parameters fsp;
        fsp.algorithm = "random";
        fsp.input_file = timestamp_table_path;
        // Ask for 1
        fsp.target_size = 1;
        fsp.jobs = 1;
        setting_omp(fsp.jobs);

        // run and test feature selection
        test_random_feature_selection(timestamp_table, fsp,
                                      // +1 for timestamp
                                      fsp.target_size + 1);
    }

private:

    void test_incremental_selection(unsigned n_jobs) {
        setting_omp(n_jobs);

        CTable ctable = big_table.compressed();
        FeatureScorer fs(ctable);
        set<arity_t> features(counting_iterator<arity_t>(0),
                              counting_iterator<arity_t>(big_table.get_arity()));
        set<arity_t> selected_features =
            incremental_selection(features, fs, 0.1, 1, false);

        ostream_container(cout, selected_features);
        cout << endl;

        TS_ASSERT_EQUALS(selected_features.size(), 6);
    }

    void test_redundant_features_small_table(unsigned n_jobs) {
        setting_omp(n_jobs);

        CTable ctable = small_table.compressed();
        FeatureScorer fs(ctable);

        {
            std::set<arity_t> features{1, 2};
            std::set<arity_t> redundant = redundant_features(features, fs, 0.2);
            ostream_container(cout, redundant) << endl;;
            TS_ASSERT_EQUALS(redundant, std::set<arity_t>{1});
        }
        {
            std::set<arity_t> features{0, 1};
            std::set<arity_t> redundant = redundant_features(features, fs, 1.1);
            ostream_container(cout, redundant) << endl;;
            TS_ASSERT_EQUALS(redundant, std::set<arity_t>{1});
        }
    }
    
    void test_redundant_features_small_table_swap_f2_f3(unsigned n_jobs) {
        setting_omp(n_jobs);

        CTable ctable = small_table_swap_f2_f3.compressed();
        FeatureScorer fs(ctable);

        {
            set<arity_t> features{1, 2};
            set<arity_t> redundant = redundant_features(features, fs, 0.2);
            ostream_container(cout, redundant) << endl;;
            TS_ASSERT_EQUALS(redundant, set<arity_t>{2});
        }
        {
            set<arity_t> features{0, 1};
            set<arity_t> redundant = redundant_features(features, fs, 0.2);
            ostream_container(cout, redundant) << endl;;
            TS_ASSERT_EQUALS(redundant, set<arity_t>{0});
        }
    }

    void test_redundant_features_big_table(unsigned n_jobs) {
        setting_omp(n_jobs);

        CTable ctable = big_table.compressed();
        FeatureScorer fs(ctable);
        set<arity_t> features{3, 4, 10, 17};
        set<arity_t> redundant = redundant_features(features, fs, 0.001);

        ostream_container(cout, redundant);
        cout << endl;

        TS_ASSERT_EQUALS(redundant.size(), 2);
    }

    void test_moses_based_feature_selection(unsigned n_jobs) {

        // set feature selection parameters
        feature_selection_parameters fsp;
        fsp.algorithm = opencog::hc;
        fsp.scorer = mi;
        fsp.input_file = FEATURE_SELECTION_TEST_DIR"small-dataset.csv";
        fsp.jobs = n_jobs;
        setting_omp(n_jobs);
        fsp.hc_max_evals = 10000;
        fsp.max_time = INT_MAX;
        fsp.mi_confi = -1.0;
        fsp.hc_cache_size = 100000;
        fsp.hc_max_score = 1;
        fsp.hc_fraction_of_remaining = 1;

        ostreamTable(std::cout << "small_table = ", small_table);

        // run and test feature selection
        test_feature_selection(small_table, fsp, "target,f1,f2");
    }

    // Call the feature selection directly, overwrite the output_file
    // to put a temporary one.
    void test_feature_selection(const Table& table,
                                feature_selection_parameters& fsp,
                                const string& expected_selected_features)
    {
        // create temporary file to put the results
        char tempfile[] = "/tmp/feature_selectionUTestXXXXXX";
        int fd = mkstemp(tempfile);
        OC_ASSERT (fd != -1);
        fsp.output_file = tempfile;

        // run feature selection (put the result into fsp.output_file)
        feature_selection(table, fsp);

        // check that the selected features are the expected ones
        ifstream in(fsp.output_file);
        string header;
        in >> header;
        std::cout << "header = " << header << std::endl;
        TS_ASSERT_EQUALS(header, expected_selected_features);

        // cleanup the junk.
        unlink(tempfile);
    }

    void test_random_feature_selection(const Table& table,
                                       feature_selection_parameters& fsp,
                                       int num_expected)
    {
        // create temporary file to put the results
        char tempfile[] = "/tmp/feature_selectionUTestXXXXXX";
        int fd = mkstemp(tempfile);
        OC_ASSERT (fd != -1);
        fsp.output_file = tempfile;

        // run feature selection (put the result into fsp.output_file)
        feature_selection(table, fsp);

        // check that the correct number of features was selected
        ifstream in(fsp.output_file);
        string header;
        in >> header;
        std::cout << "header = " << header << std::endl;

        // count number of commas in the header. Recall the output
        // will appear in the header, accounting for one extra comma.
        int nc = 0;
        for (size_t i=0; i<header.size(); i++) {
            if (',' == header[i]) nc++;
        }
        TS_ASSERT_EQUALS(nc, num_expected);

        // cleanup the junk.
        unlink(tempfile);
    }
};
